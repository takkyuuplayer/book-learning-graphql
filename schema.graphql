scalar DateTime
input PhotoFilter {
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange {
  start: DateTime!
  end: DateTime!
}

input DataPage {
  first: Int = 25
  start: Int = 0
}

input DataSort {
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

"""
A user who has been authorized by GitHub at least once
"""
type User {
  """
  The user's unique GitHub login
  """
  githubLogin: ID!
  """
  The user's first and last name
  """
  name: String
  """
  A url for the user's GitHub profile photo
  """
  avatar: String
  """
  All of the photos posted by this user
  """
  postedPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  """
  All of the photos posted by this user
  """
  inPhotos(filter: PhotoFilter, paging: DataPage, sorting: DataSort): [Photo!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime!
  category: PhotoCategory!
  postedBy: User!
  taggedUsers(sorting: DataSort): [User!]!
}

type Friendship {
  friends: [User!]!
  how_long: Int!
  where_we_met: Location
}

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type Query {
  totalPhotos: Int!
  allPhotos(filter: PhotoFilter, paging: DataPage, sorting: DataSort): [Photo!]!
  totalUsers: Int!
  allUsers(paging: DataPage, sorting: DataSort): [User!]!
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
  allPhotos(category: PhotoCategory): [Photo!]!
}

type AuthPayload {
  user: User!
  token: String!
}

input PostPhotoInput {
  name: String!
  description: String
  category: PhotoCategory = PORTRAIT
}

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
  githubAuth(code: String!): AuthPayload!
}

schema {
  query: Query
  mutation: Mutation
}
